"""
vtelem - A definition of the supported primitive types for this library.
"""

# built-in
from enum import Enum
from json import JSONEncoder
import random
from typing import Any, Callable, NamedTuple, Tuple, Type, Union, cast

# internal
from vtelem.types.serializable import ObjectData

PrimitiveValue = Union[int, float, bool]


class BasePrimitive(NamedTuple):
    """A schema for primitive enum values."""

    fmt: str
    type: Type[Any]
    size: int
    name: str
    signed: bool
    min: int = 0
    max: int = 0
    validate: Callable[[Any, int], bool] = lambda _, __: True


def integer_bounds(byte_count: int, signed: bool) -> Tuple[int, int]:
    """Compute maximum and minimum values given size and signedness."""

    min_val = 0 if not signed else -1 * (2 ** (byte_count * 8 - 1))
    width = 8 * byte_count if not signed else 8 * byte_count - 1
    return min_val, (2**width) - 1


def integer_can_hold(prim: BasePrimitive, val: int) -> bool:
    """
    Simple checl to see if a primitive can hold this arbitrary integer value.
    """

    return prim.min <= val <= prim.max


class Primitive(Enum):
    """
    An enumeration containing the supported primitive types and their 'struct'
    format specifier.
    """

{% for item in primitives["entries"] %}
  {% if item["integer"] %}
    {{item["name"]|upper}} = BasePrimitive(
        "{{item["python"]["serdes"]}}",
        {{item["python"]["type"]}},
        {{item["bytes"]}},
        "{{item["name"]}}",
        {{item["signed"]}},
        *integer_bounds({{item["bytes"]}}, {{item["signed"]}}),
        integer_can_hold,
    )
  {% else %}
    {{item["name"]|upper}} = BasePrimitive("{{item["python"]["serdes"]}}", {{item["python"]["type"]}}, {{item["bytes"]}}, "{{item["name"]}}", {{item["signed"]}})
  {% endif %}
{% endfor %}


def random_integer(prim: Primitive) -> int:
    """
    Get a random integer that's guaranteed to fit in the provided primitive.
    """

{% for item in primitives["entries"] %}
{% if not item["integer"] %}
    assert prim != Primitive.{{item["name"]|upper}}
{% endif %}
{% endfor %}
    return random.randint(prim.value.min, prim.value.max)


def get_name(inst: Primitive) -> str:
    """Get a primitive's canonical name."""

    return inst.value.name


def get_fstring(inst: Primitive) -> str:
    """Get the 'struct' format specifier for a primitive."""

    return inst.value.fmt


def get_size(inst: Primitive) -> int:
    """Get the size of a primitive."""

    return inst.value.size


def default_val(inst: Primitive) -> PrimitiveValue:
    """Get the default value for a specific primitive."""

    return cast(PrimitiveValue, inst.value.type())


INTEGER_PRIMITIVES = [
{% for item in primitives["entries"] %}
{% if item["integer"] %}
    Primitive.{{item["name"]|upper}},
{% endif %}
{% endfor %}
]


def to_dict(prim: Primitive) -> ObjectData:
    """Convert a primitive to a dictionary for serialization."""

    val: BasePrimitive = prim.value
    data: ObjectData = {
        "name": val.name,
        "size": val.size,
        "signed": val.signed,
        "integer": prim in INTEGER_PRIMITIVES,
    }
    if val.min != 0 or val.max != 0:
        data["min"] = val.min
        data["max"] = val.max
    return data


class PrimitiveEncoder(JSONEncoder):
    """A JSON encoder for a primitive enum."""

    def default(self, o) -> ObjectData:
        """Implement serialization for the primitive enum value."""

        assert isinstance(o, Primitive)
        return to_dict(o)
